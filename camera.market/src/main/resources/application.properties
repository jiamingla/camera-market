spring.application.name=camera.market

# --- PostgreSQL Cloud SQL Connection Settings ---

# Option 1: Using Cloud SQL Socket Factory (Recommended for Cloud Run)
# The Socket Factory handles secure connection without needing IP allowlisting.
# The URL format is simpler: jdbc:postgresql:///<database_name>
# Use environment variable or default
spring.datasource.url=jdbc:postgresql:///${DB_NAME:postgres}
# Use environment variable or default user
spring.datasource.username=${DB_USER:postgres}
# Use environment variable (set in Cloud Run secrets)
spring.datasource.password=${DB_PASS}
# Specify the socket factory and instance connection name
spring.datasource.hikari.data-source-properties.socketFactory=com.google.cloud.sql.postgres.SocketFactory
# e.g., your-project-id:asia-east1:camera-market-db (set in Cloud Run env vars)
spring.datasource.hikari.data-source-properties.cloudSqlInstance=${DB_INSTANCE_CONNECTION_NAME}

# Option 2: Standard JDBC URL (Mainly for local testing with Public IP or via proxy)
# spring.datasource.url=jdbc:postgresql://<YOUR_CLOUDSQL_PUBLIC_IP>:5432/${DB_NAME:camera_market}
# spring.datasource.username=${DB_USER:postgres}
# spring.datasource.password=${DB_PASS}

# --- JPA/Hibernate Settings ---
# Specify the PostgreSQL dialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# VERY IMPORTANT: Change ddl-auto strategy!
# 'update': Hibernate tries to update the schema. OK for development, risky for production.
# 'validate': Hibernate validates the schema against entities. Fails if mismatch. Safer.
# 'none': Hibernate does nothing. Recommended for production with Flyway/Liquibase.
# Start with 'update' for initial setup, but plan to move to 'validate' or 'none'.
spring.jpa.hibernate.ddl-auto=validate

# Disable H2 Console
spring.h2.console.enabled=false

# --- JWT Settings (Keep as is) ---
jwt.secret=your_long_and_random_secret_key_here_abcdefghijklmnopqrstuvwxyz123456
jwt.expiration=86400000

# --- Logging Settings (Keep as is or adjust) ---
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web.filter.CorsFilter=TRACE
logging.level.org.springframework.web=DEBUG
# TRACE 比 DEBUG 更詳細，可以看到 CorsFilter 的內部判斷
logging.level.org.springframework.web.servlet=DEBUG
# Renamed from servlet to filter for clarity# Renamed from servlet to filter for clarity
logging.level.org.springframework.web.filter=DEBUG
# Changed cors to TRACE for more detail if needed
logging.level.org.springframework.web.cors=TRACE
logging.level.org.springframework.security.web.csrf=DEBUG
logging.level.jiamingla.first.camera.market=DEBUG
# Optional: Log generated SQL
logging.level.org.hibernate.SQL=DEBUG
# Optional: Log SQL parameters
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

server.forward-headers-strategy=framework
# 或者，如果上面的不行，可以試試：
# server.forward-headers-strategy=native
# server.use-forward-headers=true # 這個在較新版本中通常由 strategy 控制，但加上也無妨